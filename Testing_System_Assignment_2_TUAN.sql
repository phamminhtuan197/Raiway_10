DROP DATABASE IF EXISTS testing_system;
CREATE DATABASE IF NOT EXISTS Testing_system;
USE Testing_system;

DROP TABLE IF EXISTS Department;
CREATE TABLE IF NOT EXISTS Department
(
	DepartmentID 	INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
	DepartmentName 	VARCHAR(50) NOT NULL UNIQUE KEY
);

DROP TABLE IF EXISTS Position;
CREATE TABLE IF NOT EXISTS Position
(
	PositionID		INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    PositionName	ENUM('DEV', 'TEST', 'SCUM MASTER', 'PM')
);

DROP TABLE IF EXISTS `Account`;
CREATE TABLE IF NOT EXISTS `Account`
(
	AccountID		INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    Email			VARCHAR(50) UNIQUE KEY,
    Usename			VARCHAR(50) UNIQUE KEY,
    Fullname		VARCHAR(50) NOT NULL,
    DepartmentID	INT UNSIGNED NOT NULL,
    FOREIGN KEY(DepartmentID) REFERENCES Department (DepartmentID),
    PositionID		INT UNSIGNED NOT NULL,
    FOREIGN KEY(PositionID) REFERENCES Position (PositionID),
    CreateDate		DATETIME DEFAULT NOW()
);

DROP TABLE IF EXISTS `Group`;
CREATE TABLE IF NOT EXISTS `Group`
(
	GroupID			INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    GroupName		VARCHAR(50),
    CreatorID		INT UNSIGNED NOT NULL,
    FOREIGN KEY(CreatorID) REFERENCES Position (PositionID),
    CreateDate		DATE
);

DROP TABLE IF EXISTS GroupAccount;
CREATE TABLE IF NOT EXISTS GroupAccount
(
	GroupID			INT UNSIGNED NOT NULL,
    FOREIGN KEY(GroupID) REFERENCES `Group` (GroupID),
    AccountID		INT UNSIGNED NOT NULL,
    FOREIGN KEY(AccountID) REFERENCES `Account` (AccountID),
    JoinDate		DATE,
    PRIMARY KEY(GroupID, AccountID)
);

DROP TABLE IF EXISTS TypeQuestion;
CREATE TABLE IF NOT EXISTS TypeQuestion
(
	TypeID			INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    TypeName		ENUM('Essay', 'Multiple-Choice')
);

DROP TABLE IF EXISTS CategoryQuestion;
CREATE TABLE IF NOT EXISTS CategoryQuestion
(
	CategoryID		INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    CategoryName	ENUM('Java','.NET','SQL','Postman','Ruby')
);

DROP TABLE IF EXISTS Question;
CREATE TABLE IF NOT EXISTS Question
(
	QuestionID		INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    Content			VARCHAR(50) NOT NULL,
    CategoryID		INT UNSIGNED NOT NULL,
    FOREIGN KEY(CategoryID) REFERENCES CategoryQuestion (CategoryID),
    TypeID			INT UNSIGNED NOT NULL,
    FOREIGN KEY(TypeID) REFERENCES TypeQuestion (TypeID),
    CreatorID		INT UNSIGNED NOT NULL,
    FOREIGN KEY(CreatorID) REFERENCES `Group` (CreatorID), 
    CreateDate		DATE
);

DROP TABLE IF EXISTS Answer;
CREATE TABLE IF NOT EXISTS Answer
(
	AnswerID		INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    Content			VARCHAR(50) NOT NULL,
    QuestionID		INT UNSIGNED NOT NULL UNIQUE KEY,
    FOREIGN KEY(QuestionID) REFERENCES Question (QuestionID),
    isCorrect		ENUM('True','False')
);

DROP TABLE IF EXISTS Exam;
CREATE TABLE IF NOT EXISTS Exam
(
	ExamID			INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `Code`			VARCHAR(10) NOT NULL,
    Title			VARCHAR(50),
    CategoryID		INT UNSIGNED NOT NULL UNIQUE KEY,
    FOREIGN KEY(CategoryID) REFERENCES CategoryQuestion (CategoryID),
    Duration		TIME,
    CreatorID		INT UNSIGNED NOT NULL UNIQUE KEY,
    FOREIGN KEY(CreatorID) REFERENCES Position (PositionID),
    CreateDate		DATE
);

DROP TABLE IF EXISTS ExamQuestion;
CREATE TABLE IF NOT EXISTS ExamQuestion
(
	ExamID			INT UNSIGNED NOT NULL UNIQUE KEY,
    FOREIGN KEY(ExamID) REFERENCES Exam (ExamID),
    QuestionID		INT UNSIGNED NOT NULL UNIQUE KEY,
    FOREIGN KEY(QuestionID) REFERENCES Question (QuestionID)
);